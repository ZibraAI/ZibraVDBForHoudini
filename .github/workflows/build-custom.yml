name: Custom Package

on:
  workflow_dispatch:
    inputs:
        houdini-version:
            description: 'Houdini version to build for'
            required: true
            default: '20.5'
        houdini-build:
            description: 'Houdini build to build against (e.g. "123")'
            required: true
        houdini-win-x64-architecture:
            description: 'Houdini architecture to use for Windows x64 build'
            required: true
            default: 'win64-vc143'
        houdini-linux-x64-architecture:
            description: 'Houdini architecture to use for Linux x64 build'
            required: true
            default: 'linux_x86_64_gcc11.2'
        houdini-mac-x64-architecture:
            description: 'Houdini architecture to use for macOS x64 build'
            required: true
            default: 'macosx_x86_64_clang15'
        houdini-mac-arm64-architecture:
            description: 'Houdini architecture to use for macOS x64 build'
            required: true
            default: 'macosx_arm64_clang15'

jobs:
  run-setup:
    name: Select houdini build
    runs-on: [self-hosted, Linux, X64, houdini]
    outputs:
      houdini-build-20-5: ${{ inputs.houdini-build }}
      # Legend
      # name - Human readable OS/Arch name. Version is appended separately.
      # run-on-all-branches - Whether to run this target on all branches. If false, will only run on main
      # runner - Github actions runner that should run the job
      # generator - Generator used for cmake configuration
      # houdini-version - Version of houdini to build against (e.g. "20.5"/"21.0")
      # houdini-build - Specific build of houdini to build against (e.g. "440")
      # houdini-install-path - Path into which houdini gets installed. This needs to be consistent with houdini install script, as it calculates path for previous version when removing it. On Windows it MUST USE BACKSLASHES.
      # hfs-path - Path to use HFS env var to. This is same as houdini-install-path on most platforms, but macOS is special and required additional suffix after houdini-install-path.
      # python-command - Python command to use for running scripts (e.g. "python"/"python3")
      # python-venv-activate-path - Path to powershell python venv activation script within venv folder
      # additional-config-args - Additional commad line args to pass to cmake configuration. Required on macOS to specify architectrue (arm64/x64)
      build-matrix-json: |
        {
          "include": [
            {
              "name": "Windows x64",
              "runner": "windows-latest",
              "generator": "Visual Studio 17 2022",
              "executable-extension": ".exe",
              "houdini-version": "${{ inputs.houdini-version }}",
              "houdini-build": "${{ inputs.houdini-build }}",
              "houdini-platform": "win64-vc143",
              "houdini-install-path": "C:\\Houdini\\20.5.${{ inputs.houdini-build }}",
              "hfs-path": "C:\\Houdini\\20.5.${{ inputs.houdini-build }}",
              "python-command": "python",
              "python-venv-activate-path": "Scripts/Activate.ps1",
              "additional-config-args": null
            },
            {
              "name": "Linux x64",
              "runner": [
                "self-hosted",
                "Linux",
                "X64",
                "houdini"
              ],
              "generator": "Ninja Multi-Config",
              "executable-extension": null,
              "houdini-version": "${{ inputs.houdini-version }}",
              "houdini-build": "${{ inputs.houdini-build }}",
              "houdini-platform": "linux_x86_64_gcc11.2",
              "houdini-install-path": "/opt/hfs20.5.${{ inputs.houdini-build }}",
              "hfs-path": "/opt/hfs20.5.${{ inputs.houdini-build }}",
              "python-command": "python3",
              "python-venv-activate-path": "bin/Activate.ps1",
              "additional-config-args": null
            },
            {
              "name": "macOS arm64",
              "runner": "macos-14",
              "generator": "Xcode",
              "executable-extension": null,
              "houdini-version": "${{ inputs.houdini-version }}",
              "houdini-build": "${{ inputs.houdini-build }}",
              "houdini-platform": "macosx_arm64_clang15.0_14",
              "houdini-install-path": "/Applications/Houdini/Houdini20.5.${{ inputs.houdini-build }}",
              "hfs-path": "/Applications/Houdini/Houdini20.5.${{ inputs.houdini-build }}/Frameworks/Houdini.framework/Versions/Current/Resources",
              "python-command": "python3",
              "python-venv-activate-path": "bin/Activate.ps1",
              "additional-config-args": "-DCMAKE_OSX_ARCHITECTURES=arm64"
            },
            {
              "name": "macOS x64",
              "runner": "macos-14",
              "generator": "Xcode",
              "executable-extension": null,
              "houdini-version": "${{ inputs.houdini-version }}",
              "houdini-build": "${{ inputs.houdini-build }}",
              "houdini-platform": "macosx_x86_64_clang15.0_14",
              "houdini-install-path": "/Applications/Houdini/Houdini20.5.${{ inputs.houdini-build }}",
              "hfs-path": "/Applications/Houdini/Houdini20.5.${{ inputs.houdini-build }}/Frameworks/Houdini.framework/Versions/Current/Resources",
              "python-command": "python3",
              "python-venv-activate-path": "bin/Activate.ps1",
              "additional-config-args": "-DCMAKE_OSX_ARCHITECTURES=x86_64"
            }
          ]
        }

    steps:
      - name: Dummy
        if: ${{ false }}
        shell: pwsh
        run: Write-Output Hello, World!
    
  build-plugin:
    needs: run-setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson( needs.run-setup.outputs.build-matrix-json ) }}
            
    runs-on: ${{ matrix.runner }}
    name: Build ${{ matrix.name }} Houdini ${{ inputs.houdini-version }}.${{ inputs.houdini-build }}

    steps:
      - name: Sync
        uses: actions/checkout@v4

      - name: Check if Houdini is installed
        id: install-check
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          ${{ matrix.python-command }} actions/houdini/is_installed.py --version ${{ inputs.houdini-version }} --build ${{ inputs.houdini-build }} --platform ${{ matrix.houdini-platform }} --install_path ${{ matrix.houdini-install-path }}

      - name: Install Houdini
        if: ${{ steps.install-check.outputs.need_install_houdini == 'true' }}
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          ${{ matrix.python-command }} -m venv actions/houdini/venv
          ./actions/houdini/venv/${{ matrix.python-venv-activate-path }}
          ${{ matrix.python-command }} -m pip install -r actions/houdini/requirements.txt
          ${{ matrix.python-command }} actions/houdini/install_houdini.py --version ${{ inputs.houdini-version }} --build ${{ inputs.houdini-build }} --platform ${{ matrix.houdini-platform }} --install_path ${{ matrix.houdini-install-path }}
        env:
          HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
          HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}

      - name: Configure Cmake
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: cmake -S . -B build -G "${{ matrix.generator }}" -DLABS_BUILD=ON -DZIBRAVDB_OUTPUT_PATH="${{ github.workspace }}/package" ${{ matrix.additional-config-args }}
        env:
          HFS: ${{ matrix.hfs-path }}

      - name: Build Release
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: cmake --build build --config Release

      - name: Repack HDA into Binary format
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          ${{ matrix.hfs-path }}/bin/hotl${{ matrix.executable-extension }} -l ${{ github.workspace }}/package/otls/zibravdb_filecache.1.0.hda ${{ github.workspace }}/package/otls/zibravdb_filecache.1.0.hda.2
          Remove-Item -Recurse -Force ${{ github.workspace }}/package/otls\zibravdb_filecache.1.0.hda
          Move-Item -Path ${{ github.workspace }}/package/otls/zibravdb_filecache.1.0.hda.2 -Destination ${{ github.workspace }}/package/otls/zibravdb_filecache.1.0.hda

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-${{ matrix.houdini-platform }}
          path: package
          if-no-files-found: error
          retention-days: 7

  merge-artifacts:
    runs-on: macos-14
    needs: [run-setup, build-plugin]
    name: Merge artifacts ${{ inputs.houdini-version }}.${{ inputs.houdini-build }}

    steps:
      - name: Sync
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-*

      - name: Merge artifacts
        shell: bash
        run: |
          mkdir merged
          mv ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-win64-vc143/* merged/
          mv ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-linux_x86_64_gcc11.2/dso/ZibraVDBForHoudini.so merged/dso/ZibraVDBForHoudini.so
          lipo -create -output merged/dso/ZibraVDBForHoudini.dylib ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-macosx_arm64_clang15.0_14/dso/ZibraVDBForHoudini.dylib ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}-macosx_x86_64_clang15.0_14/dso/ZibraVDBForHoudini.dylib

      - name: Apple sign and notarize
        shell: bash
        run: ${{ github.workspace }}/actions/apple/sign_and_notarize_dylib.sh ${{ github.workspace }}/merged/dso/ZibraVDBForHoudini.dylib
        env:
          DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.DEVELOPER_ID_APPLICATION_ZIBRA_AI_CERT }}
          DEVELOPER_ID_APPLICATION_PASS: ${{ secrets.DEVELOPER_ID_APPLICATION_ZIBRA_AI_PASS }}
          DEVELOPER_ID_APPLICATION_NAME: ${{ secrets.DEVELOPER_ID_APPLICATION_ZIBRA_AI_NAME }}
          APPLE_DEVELOPER_TEAM: ${{ secrets.APPLE_DEVELOPER_ZIBRA_AI_TEAM }}
          NOTARIZATION_USER: ${{ secrets.NOTARIZATION_ZIBRA_AI_USER }}
          NOTARIZATION_PASS: ${{ secrets.NOTARIZATION_ZIBRA_AI_PASS }}

      - name: Save merged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZibraVDBForHoudini-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}
          path: merged
          if-no-files-found: error
          retention-days: 28

      - name: Delete partial artifacts
        uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: ZibraVDBForHoudini-*-${{ inputs.houdini-version }}.${{ inputs.houdini-build }}
 